/* global describe before after it expect */
const path = require('path')
const util = require('../../lib/tools/util')

const INSAC        = 'node ../../index.js'
const INSAC2       = 'node ../../../index.js'
const PROJECT_PATH = path.resolve(__dirname, 'app')

describe('\n - Prueba de comandos\n', () => {
  before(async () => {
    await util.cmd(`rm -rf app`, __dirname)
  })
  after(async () => {
    await util.cmd(`rm -rf app`, __dirname)
  })
  describe(` Creación de un nuevo proyecto`, () => {
    it('Comando version', async () => {
      await util.cmd(`${INSAC} --version`, __dirname)
      expect(true).to.equal(true)
    })
    it('Comando new', async () => {
      await util.cmd(`rm -rf app`, __dirname)
      await util.cmd(`${INSAC} new app`, __dirname)
      verifyDir('certs')
      verifyDir('logs')
      verifyDir('src')
      verifyDir('src/config')
      verifyFile('src/config/app.config.js')
      verifyFile('src/config/app.config.js', `exports.UTIL`, true)
      verifyFile('src/config/example.app.config.js')
      verifyDir('src/hooks')
      verifyFile('src/hooks/custom.after.hook.js')
      verifyFile('src/hooks/custom.before.hook.js')
      verifyDir('src/modules')
      verifyDir('src/modules/UTIL')
      verifyDir('src/modules/UTIL/services')
      verifyFile('src/modules/UTIL/services/util.service.js')
      verifyFile('src/modules/UTIL/util.module.js')
      verifyFile('src/app.js', `service.addModule('UTIL')`, true)
      verifyDir('test')
      verifyFile('.eslintrc.js')
      verifyFile('.gitignore')
      verifyFile('.insac.js')
      verifyFile('ecosystem.json')
      verifyFile('example.ecosystem.json')
      verifyFile('index.js')
      verifyFile('package.json')
      verifyFile('README.md')
    })
    it('Comando add:module RESOURCE', async () => {
      await util.cmd(`${INSAC2} add:module api`, PROJECT_PATH)
      verifyDir('src/modules/API')
      verifyDir('src/modules/API/dao')
      verifyDir('src/modules/API/models')
      verifyDir('src/modules/API/resources')
      verifyDir('src/modules/API/seeders')
      verifyDir('src/modules/API/seeders/production')
      verifyFile('src/modules/API/api.module.js')
      verifyFile('src/app.js', `service.addModule('API')`, true)
      verifyFile('src/config/app.config.js', `exports.API`, true)
    })
    it('Comando add:model', async () => {
      await util.cmd(`${INSAC2} add:model libro --fields titulo,paginas:INTEGER,precio:FLOAT`, PROJECT_PATH)
      verifyFile('src/modules/API/dao/libro.dao.js')
      verifyFile('src/modules/API/models/libro.model.js')
    })
    it('Comando add:seed', async () => {
      await util.cmd(`${INSAC2} add:seed -m libro`, PROJECT_PATH)
      verifyFile('src/modules/API/seeders/libro.seed.js')
    })
    it('Comando add:resource', async () => {
      await util.cmd(`${INSAC2} add:resource api/v1/custom`, PROJECT_PATH)
      verifyDir('src/modules/API/resources/api/v1/custom')
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.get', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.getId', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.create', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.update', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.destroy', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.restore', false)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.input.js')
      verifyFile('src/modules/API/resources/api/v1/custom/custom.middleware.js')
      verifyFile('src/modules/API/resources/api/v1/custom/custom.output.js')
      verifyFile('src/modules/API/resources/api/v1/custom/custom.route.js')
    })
    it('Comando add:route por defecto', async () => {
      await util.cmd(`${INSAC2} add:route get -r api/v1/custom`, PROJECT_PATH)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.controller.js', 'CONTROLLER.get', true)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.input.js', 'INPUT.get', true)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.middleware.js', 'MIDDLEWARE.get', true)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.output.js', 'OUTPUT.get', true)
      verifyFile('src/modules/API/resources/api/v1/custom/custom.route.js', 'ROUTE.get', true)
    })
    it('Comando add:route con tipo de ruta', async () => {
      await util.cmd(`${INSAC2} add:resource api/v1/aaa`, PROJECT_PATH)
      await util.cmd(`${INSAC2} add:route create -r api/v1/aaa -t create`, PROJECT_PATH)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.get', false)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.getId', false)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.create', true)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.update', false)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.destroy', false)
      verifyFile('src/modules/API/resources/api/v1/aaa/aaa.controller.js', 'CONTROLLER.restore', false)
    })
    it('Comando gen:resource con todas las rutas', async () => {
      await util.cmd(`${INSAC2} gen:resource api/v1/libros -m libro`, PROJECT_PATH)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.get', true)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.getId', true)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.create', true)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.update', true)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.destroy', true)
      verifyFile('src/modules/API/resources/api/v1/libros/libro.controller.js', 'CONTROLLER.restore', true)
    })
    it('Comando gen:resource con algunas rutas', async () => {
      await util.cmd(`${INSAC2} gen:resource api/v2/libros -m libro -t get,create`, PROJECT_PATH)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.get', true)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.getId', false)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.create', true)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.update', false)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.destroy', false)
      verifyFile('src/modules/API/resources/api/v2/libros/libro.controller.js', 'CONTROLLER.restore', false)
    })
    it('Comando add:module SENDGRID_MAIL', async () => {
      await util.cmd(`${INSAC2} add:module email -t sendgrid_mail`, PROJECT_PATH)
      verifyDir('src/modules/EMAIL')
      verifyDir('src/modules/EMAIL/mails')
      verifyDir('src/modules/EMAIL/mails/welcome')
      verifyFile('src/modules/EMAIL/mails/welcome/welcome.mail.html')
      verifyFile('src/modules/EMAIL/mails/welcome/welcome.mail.js')
      verifyFile('src/modules/EMAIL/email.module.js')
      verifyFile('src/app.js', `service.addModule('EMAIL')`, true)
      verifyFile('src/config/app.config.js', `exports.EMAIL`, true)
    })
    it('Comando add:module MODULE', async () => {
      await util.cmd(`${INSAC2} add:module other -t module`, PROJECT_PATH)
      verifyDir('src/modules/OTHER')
      verifyDir('src/modules/OTHER/services')
      verifyFile('src/modules/OTHER/services/other.service.js')
      verifyFile('src/modules/OTHER/other.module.js')
      verifyFile('src/app.js', `service.addModule('OTHER')`, true)
      verifyFile('src/config/app.config.js', `exports.OTHER`, true)
    })
    it('Prueba la instalación del servicio', async () => {
      await util.cmd(`npm run setup`, PROJECT_PATH)
    })
  })
})

function verifyDir (dirPath) {
  const DIR_PATH = path.resolve(PROJECT_PATH, dirPath)
  expect(util.isDir(DIR_PATH)).to.equal(true)
}

function verifyFile (filePath, content, result = true) {
  const FILE_PATH = path.resolve(PROJECT_PATH, filePath)
  expect(util.isFile(FILE_PATH)).to.equal(true)
  if (content) {
    const FILE_CONTENT = util.readFile(FILE_PATH)
    expect(FILE_CONTENT.includes(content)).to.equals(result)
  }
}
